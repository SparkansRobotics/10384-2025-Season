private SparkMax frontLeftMotor; // main motors
  private SparkMax backLeftMotor;
  private SparkMax frontRightMotor;
  private SparkMax backRightMotor;
  private double speed = 0.60; // drive train speed
  private double lowSpeed = 0.4; 
  //autonomous list
  private List<AutonomousMove> autonomousMoves = List.of(new AutonomousMove(30,0), new AutonomousMove(10, 0),new AutonomousMove(0, -24.5));
  private int moveIndex;
  private double leftTarget;
  private RelativeEncoder m_rightEncoder;
  private RelativeEncoder m_leftEncoder;
  private double autoSpeed = 0.3;
  
public void robotInit() {
    // drivetrain motors
    frontLeftMotor = new SparkMax(1, MotorType.kBrushed);
    backLeftMotor = new SparkMax(2, MotorType.kBrushed);
    frontRightMotor = new SparkMax(3, MotorType.kBrushed);
    backRightMotor = new SparkMax(4, MotorType.kBrushed);

    driveControl = new Joystick(2);
    OperatorControl = new Joystick(3);

    double wheelCircumference = Math.PI * 6.0; // 6-inch wheel
    leftConfig.encoder.countsPerRevolution(8192);
    leftConfig.encoder.positionConversionFactor(wheelCircumference);
    frontLeftMotor.configure(leftConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

    //Auto encoders
    m_leftEncoder = frontLeftMotor.getEncoder();
    m_rightEncoder = backLeftMotor.getEncoder();
 
    }
 
    public void robotPeriodic() {
 
    }
 
    public void autonomousInit() {//reseting index to zero
        //setting initial target
        moveIndex = 0;
        leftTarget = m_leftEncoder.getPosition() + getLeftEncoderTravelDistance(autonomousMoves.get(moveIndex)) ;
 
    }
 
    public void autonomousPeriodic() {if (moveIndex >= autonomousMoves.size()) {
        setDrivetrainMotors(0, 0);
        return;
      }
      var move = autonomousMoves.get(moveIndex);
     
      double left = 0;
      double right = 0;
      //interpret displacment and turn values for motor direction
      if (move.turnAngle > 0){
        left = -1;
        right = 1;
      } else if (move.turnAngle < 0){
        left = 1;
        right = -1;
      } else if (move.displacement > 0){
        left = 1;
        right = 1;
      } else if (move.displacement < 0){
        left = -1;
        right = -1;
      }
   
   
      final var leftCurrentPosition = m_leftEncoder.getPosition();
     
      //backwards and left
      if (left<0) {
        if (leftCurrentPosition>leftTarget){
          setDrivetrainMotors(left*autoSpeed, right*autoSpeed);
        } else {
          moveIndex++;
          if (moveIndex<autonomousMoves.size()){
            leftTarget = leftCurrentPosition + getLeftEncoderTravelDistance(autonomousMoves.get(moveIndex)) ;  
          }
        }
      }
      //forwards and right
      if (left > 0) {
        if (leftCurrentPosition < leftTarget){
          setDrivetrainMotors(left * autoSpeed, right * autoSpeed);
        } else {
          moveIndex++;
          if (moveIndex<autonomousMoves.size()){
            leftTarget = leftCurrentPosition + getLeftEncoderTravelDistance(autonomousMoves.get(moveIndex)) ;  
          }
        }
      }
     
      System.out.println(m_leftEncoder.getPosition());
    }
 
    }
 
    public void teleopInit() {
 
    }
 
    public void teleopPeriodic() {
        //joystick deadband for driver controller
    double forwardJoystick = applyDeadband(driveControl.getRawAxis(1) * -1);        // 1
    double turnJoystick = applyDeadband(driveControl.getRawAxis(2));                // 0
 
    double leftWheelsRaw = forwardJoystick + turnJoystick * 0.7;                         // 1
    double rightWheelsRaw = forwardJoystick - turnJoystick * 0.7;                        // 1

    //setDrivetrainMotors(0.3, 0.3);
   
 
    double leftWheels = 0;
    double rightWheels = 0;
 
    // This is not required but good practice
    // Normalize the motor values
    if (leftWheelsRaw > 1) {
      leftWheels = 1;
    } else if (leftWheelsRaw < -1) {
      leftWheels = -1;
    } else {
      leftWheels = leftWheelsRaw;
    }
 
    if (rightWheelsRaw > 1) {
      rightWheels = 1;
    } else if (rightWheelsRaw < -1) {
      rightWheels = -1;
    } else {
      rightWheels = rightWheelsRaw;
    }
 
    if (driveControl.getRawButton(5)){
      setDrivetrainMotors(leftWheels * lowSpeed, rightWheels * lowSpeed);
    } else {
      setDrivetrainMotors(leftWheels * speed, rightWheels * speed);
    }

    System.out.println("Relative Encoder Counts: " + m_relativeEncoder.getPosition());

    private void setDrivetrainMotors(double left, double right) {
        frontLeftMotor.set(-left);
        backLeftMotor.set(left);
        frontRightMotor.set(-right);
        backRightMotor.set(right);
      }
      public double getLeftStartPosition() {
        return m_leftEncoder.getPosition(); // Returns position in inches
      }
     
      public double getRightPosition() {
        return m_rightEncoder.getPosition(); // Same for the right side
      }
     
      private double applyDeadband(double controllerValue) {
        if (Math.abs(controllerValue) < deadBand) {
          return 0;
        }
     
        return Math.copySign((Math.abs(controllerValue) - deadBand) / (1 - deadBand), controllerValue); // 0.07 - 0.05 = 0.02 / 0.95 = 1.05
      }
       
    }
 