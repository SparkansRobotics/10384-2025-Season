private ElevatorMode elevatorMode = ElevatorMode.JOYSTICK;
  private final SparkMax m_elevatorMotor = new SparkMax(5, MotorType.kBrushless);
  private final SparkMaxConfig m_motorConfig = new SparkMaxConfig();
  private final RelativeEncoder m_relativeEncoder = m_elevatorMotor.getAlternateEncoder();
  private final SparkClosedLoopController m_closedLoopController = m_elevatorMotor.getClosedLoopController();
 
  private static final double SPROCKET_DIAMETER = 1.868; // inches
  private static final double SPROCKET_CIRCUMFERENCE = Math.PI * SPROCKET_DIAMETER;
  private static final double POSITION_CONVERSION_FACTOR = SPROCKET_CIRCUMFERENCE;
  private final double VELOCITY_CONVERSION_FACTOR = POSITION_CONVERSION_FACTOR; // Same factor applies for velocity
  private double kp = 0.1; // Proportional gain
  private double ki = 0; // Integral gain
  private double kd = 0; // Derivative gain
   // the top limit switch should be wired to port 0 on the roborio
   private DigitalInput toplimitSwitch = new DigitalInput(0);
   // bottom limit switch wired to port
   private DigitalInput bottomlimitSwitch = new DigitalInput(1);
  public void robotInit() {
     // controllers
     driveControl = new Joystick(2);
     OperatorControl = new Joystick(3);
     // pid configuration
    m_motorConfig.alternateEncoder
    .positionConversionFactor(POSITION_CONVERSION_FACTOR)
    .velocityConversionFactor(VELOCITY_CONVERSION_FACTOR);

m_motorConfig.closedLoop
    .feedbackSensor(FeedbackSensor.kAlternateOrExternalEncoder)
    .p(kp)
    .i(ki)
    .d(kd);
m_elevatorMotor.configure(m_motorConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);
}

 
  }

  public void robotPeriodic() {

  }

  public void autonomousInit() {

  }

  public void autonomousPeriodic() {

  }

  public void teleopInit() {

  }

  public void teleopPeriodic() {
     // button pressed values (true/false)
     var isLevelOneButtonPressed = OperatorControl.getRawButton(4);
     var isProcessorButtonPressed = OperatorControl.getRawButton(7);
     var isBottomButtonPressed = OperatorControl.getRawButton(6);
     var isEndgameButtonPressed = OperatorControl.getRawButton(8);
  
     var setPointButtons = List.of(isLevelOneButtonPressed, isProcessorButtonPressed, isBottomButtonPressed, isEndgameButtonPressed);
     // check if buttons are pressed
     var isSetPointButtonPressed = setPointButtons.stream().anyMatch(isButtonPressed -> isButtonPressed);
     // number of buttons pressed
     var numberOfSetPointButtonsPressed = setPointButtons.stream().filter(isButtonPressed -> isButtonPressed).count();
  
     double ElevatorJoystickValue = getManualElevator();
     var isJoystickPressed = ElevatorJoystickValue != 0;
  
     //go into joystick or button mode depending on which one is used
     if (isJoystickPressed) {
       elevatorMode = ElevatorMode.JOYSTICK;
     } else if (isSetPointButtonPressed) {
       elevatorMode = ElevatorMode.SETPOINT;
     }
  
     // if joystick is being used for elevator
     if (ElevatorMode.JOYSTICK.equals(elevatorMode)) {
       // limit switch
       if (isElevatorAtTop() && ElevatorJoystickValue > 0 || isElevatorAtBottom() && ElevatorJoystickValue < 0) {
         m_elevatorMotor.stopMotor();
       } else {
         // set elevator to joystick values
         m_elevatorMotor.set(ElevatorJoystickValue);
         System.out.println(ElevatorJoystickValue);
       }
     }
  
     //if buttons are being used for elevator
     if (ElevatorMode.SETPOINT.equals(elevatorMode)) {
       if (isElevatorAtTop() || isElevatorAtBottom()) {
         System.out.println("working");
         // limit switch code
         m_elevatorMotor.stopMotor();
       } else {
         // if more than one elevator button is pressed, motor will stop
         if (numberOfSetPointButtonsPressed > 1) {
           m_elevatorMotor.stopMotor();
         } else if (isBottomButtonPressed) {
           //ground
           m_closedLoopController.setReference(0, ControlType.kPosition, ClosedLoopSlot.kSlot0);
         } else if (isProcessorButtonPressed) {
           //processor
           m_closedLoopController.setReference(13.2, ControlType.kPosition, ClosedLoopSlot.kSlot0);
         } else if (isLevelOneButtonPressed) {
           //L1
           m_closedLoopController.setReference(36.6, ControlType.kPosition, ClosedLoopSlot.kSlot0);
         } else if (isEndgameButtonPressed) {
           //endgame
           m_closedLoopController.setReference(50.4, ControlType.kPosition, ClosedLoopSlot.kSlot0);
         }
       }
     }
  
     
  
   }
  
   // System.out.println(m_rightEncoder.getPosition());}
  
   // System.out.println("Left Position (inches): " + leftCurrentPosition + ", Left
   // Encoder Counts: " + m_leftEncoder.getPosition());
   // System.out.println("Right Position (inches): " + rightPosition + ", Right
   // Encoder Counts: " + m_rightEncoder.getPosition());
   // System.out.println("startingposition (inches):" + leftStartPosition);
  
   public double getLeftStartPosition() {
     return m_leftEncoder.getPosition(); // Returns position in inches
   }
  
   public double getRightPosition() {
     return m_rightEncoder.getPosition(); // Same for the right side
   }
  
   private double applyDeadband(double controllerValue) {
     if (Math.abs(controllerValue) < deadBand) {
       return 0;
     }
  
     return Math.copySign((Math.abs(controllerValue) - deadBand) / (1 - deadBand), controllerValue); // 0.07 - 0.05 = 0.02 / 0.95 = 1.05
   }
  
  
   }
  
   private boolean isElevatorAtTop() {
     return toplimitSwitch.get();
   }
  
   private boolean isElevatorAtBottom() {
     return bottomlimitSwitch.get();
   }
  
   private double getManualElevator() {
     // elevator values
     return applyDeadband(-OperatorControl.getRawAxis(1));
  
   }
   
 }
     
  }